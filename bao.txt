program: declist EOF
declist: decl declist | decl
decl: vardecl | constdecl | structdecl | interfacedecl | funcdecl | methodimple

    vardecl: normal_vardecl | arr_vardecl 
        normal_vardecl: normal_vardecl_without_init 
                        | normal_vardecl_with_init
            normal_vardecl_without_init: VAR ID typedecl SEMICO
            normal_vardecl_with_init: VAR ID (typedecl)? ASSIGN expr SEMICO 
                typedecl: INT | FLOAT | STRING | BOOLEAN | ID
        arr_vardecl: arr_vardecl_without_init | arr_vardecl_with_init
            arr_vardecl_with_init: VAR ID ASSIGN (arrdimlist typedecl) arrliteral SEMICO 
            arr_vardecl_without_init:VAR ID arrdimlist typedecl SEMICO  
                arrdimlist: arrdim arrdimlist*
                    arrdim: LBRACK (DEC_LIT | ID) RBRACK  
                arrliteral: arrdimlist typedecl arrlistvalue
                arrlistvalue: LBRACE listvalue RBRACE
                listvalue: value_for_arr COMMA listvalue | value_for_arr
                value_for_arr: literalvalue_for_arr | arrlistvalue
                    literalvalue_for_arr: DEC_LIT | BIN_LIT| OCT_LIT| HEX_LIT| FLOAT_LIT
                                            | STRING_LIT| TRUE| FALSE| NIL| structinst
                    structinst: ID structinst_body
                    structinst_body: LBRACE structinst_fieldlist RBRACE
                    structinst_fieldlist: structinst_fieldprime
                    structinst_fieldprime: structinst_field COMMA structinst_fieldprime 
                                        | structinst_field
                    structinst_field: ID COLON expr
    constdecl: CONST ID ASSIGN expr SEMICO 
    structdecl: TYPE ID STRUCT structbody SEMICO
        structbody: LBRACE fieldlist RBRACE
            fieldlist: field fieldlist*
                field: ID (arrdimlist)* typedecl SEMICO
    interfacedecl: TYPE ID INTERFACE interfacebody SEMICO
        interfacebody: LBRACE methodlist RBRACE
            methodlist: method methodlist | 
            method: ID LPAREN paramlist RPAREN (returntype)? SEMICO
    funcdecl: FUNC ID LPAREN paramlist RPAREN (returntype)? funcbody
        paramlist: param_group_prime
        param_group_prime: param_group COMMA param_group_prime | param_group
        param_group: param_mem_list (arrdimlist)* typedecl
        param_mem_list: ID COMMA param_mem_list | ID
        funcbody: LBRACE stmtlist RBRACE
        stmtlist: stmt stmtlist | 
        returntype: (arrdimlist)? typedecl 
    methodimple: FUNC LPAREN ID ID RPAREN ID LPAREN paramlist RPAREN (returntype)? methodimple_body SEMICO
        methodimple_body: LBRACE stmtlist RBRACE
expr: expr OR expr0 | expr0
expr0: expr0 AND expr1 | expr1
expr1: expr1 (EQUAL | NOT_EQUAL 
            | LESS | GREATER
            | LESS_OR_EQUAL | GREATER_OR_EQUAL) expr2 | expr2
expr2: expr2 (PLUS | MINUS) expr3| expr3;
expr3: expr3 (MULTIPLY | DIVIDE | MODULUS) expr4 | expr4;
expr4: (MINUS | NOT) expr4 | expr5;
expr5: expr5 SELECTOR_ID | expr5 LBRACK expr RBRACK | expr6
expr6: subexpr | value
    value: literalvalue | ID | funccall
    subexpr: LPAREN expr RPAREN
        literalvalue: literalvalue_for_arr | arrliteral
    funccall: ID LPAREN arglist RPAREN
        arglist: argprime | 
        argprime: expr COMMA argprime | expr
methodcall: expr accesslist LPAREN arglist RPAREN
stmt: vardecl | constdecl | assignstmt | returnstmt
              | ifstmt | forstmt | breakstmt | continuestmt | callstmt
    assignstmt: var assignop expr SEMICO
        var: ID accesslist?
        accesslist: access accesslist | access
        access: arrayaccess | structaccess
            arrayaccess: LBRACK expr RBRACK
            structaccess: SELECTOR ID
        assignop: SHORT_ASSIGN | PLUS_ASSIGN | MINUS_ASSIGN | MUL_ASSIGN
                    | DIV_ASSIGN | MOD_ASSIGN
    returnstmt: RETURN expr SEMICO
    callstmt:( funccall |  methodcall) SEMICO
    ifstmt: firstifstmt elseifstmtlist (elsestmt)* SEMICO
        firstifstmt: IF LPAREN expr RPAREN ifstmtbody
            ifstmtbody:  LBRACE stmtlist RBRACE
        elseifstmtlist: elseifstmt elseifstmtlist | 
            elseifstmt: ELSE IF LPAREN expr RPAREN ifstmtbody
        elsestmt: ELSE ifstmtbody
    forstmt: basicforstmt | init_cond_update_forstmt | rangeforstmt
        basicforstmt: FOR expr forstmtbody SEMICO
        forstmtbody: LBRACE stmtlist RBRACE
        init_cond_update_forstmt: FOR init_for SEMICO expr SEMICO assign forstmtbody SEMICO
            init_for: assign | VAR VAR typedecl? ASSIGN expr
            assign: var assignop expr
        rangeforstmt: FOR ID COMMA ID SHORT_ASSIGN RANGE expr forstmtbody SEMICO
        breakstmt: BREAK SEMICO
        continuestmt: CONTINUE SEMICO